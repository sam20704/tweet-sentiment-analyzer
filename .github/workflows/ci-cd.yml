name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: docker.io
  DOCKERHUB_USERNAME: sameer2074 # Note: It's safer to use secrets.DOCKER_USERNAME if possible
  BACKEND_IMAGE_NAME: sameer2074/tweet-sentiment-analyzer-backend
  FRONTEND_IMAGE_NAME: sameer2074/tweet-sentiment-analyzer-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Install test dependencies
      run: pip install pytest pytest-asyncio httpx
    - name: Run backend tests
      run: pytest tests/ -v --tb=short
    - name: Test backend imports
      run: |
        cd backend
        python -c "import main, models; print('Backend imports successful')"
    - name: Check code formatting (optional)
      run: |
        pip install black
        black --check --diff backend/ || echo "Code formatting check completed"

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_LOGIN_TOKEN }}
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.BACKEND_IMAGE_NAME }}
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.FRONTEND_IMAGE_NAME }}
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # The 'deploy' job here is a smoke test to ensure the containers can run together.
    - name: Test deployment with docker-compose
      run: |
        docker-compose up --build -d
        
        # --- IMPROVED AND MORE ROBUST WAIT LOGIC ---
        # This loop explicitly checks the health status of EACH container.
        echo "Waiting for services to become healthy..."
        timeout 120s bash -c '
          while true; do
            backend_status=$(docker inspect -f {{.State.Health.Status}} tweet-sentiment-analyzer-backend-1 2>/dev/null || echo "starting")
            frontend_status=$(docker inspect -f {{.State.Health.Status}} tweet-sentiment-analyzer-frontend-1 2>/dev/null || echo "starting")
            
            echo "Backend status: $backend_status, Frontend status: $frontend_status"
            
            if [ "$backend_status" = "healthy" ] && [ "$frontend_status" = "healthy" ]; then
              echo "✅ All services are healthy!"
              break
            fi
            sleep 5
          done
        '
        
        echo "Pinging service endpoints as a final check..."
        
        # Test backend health
        curl -f http://localhost:8000/health
        
        # --- CORRECTED FRONTEND HEALTH CHECK URL ---
        # We test the main Streamlit page, not the unreliable internal endpoint.
        curl -f http://localhost:8501
        
        echo "✅ Deployment test successful!"

    - name: Clean up
      if: always()
      run: docker-compose down

  notification:
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-and-push, deploy]
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "✅ Deployment completed successfully!"
        else
          echo "❌ Deployment failed or was skipped"
        fi